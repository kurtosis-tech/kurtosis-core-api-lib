syntax = "proto3";
package api_container_api;

// NOTE: It sucks that we have this Go-specific logic inside this file (which should be language-agnostic). However, the Protobuf team have
// taken a hard stance on this being the way it should be done, so we have to do it this way.
option go_package = "github.com/kurtosis-tech/kurtosis-core-api-lib/api/golang/kurtosis_core_rpc_api_bindings";

import "google/protobuf/empty.proto";

service ApiContainerService {
  // Starts the registration of an external container (started by a third-party source, not the API container)
  rpc StartExternalContainerRegistration(google.protobuf.Empty) returns (StartExternalContainerRegistrationResponse) {};

  // Finishes the registration of an container (started by a third-party source, not the API contianer) that was started previously
  // NOTE: It's important not to forget to finish this registration, else the external container won't be recognized by the API container!
  rpc FinishExternalContainerRegistration(FinishExternalContainerRegistrationArgs) returns (google.protobuf.Empty) {};

  // Starts a module container in the enclave
  rpc LoadModule(LoadModuleArgs) returns (LoadModuleResponse) {};

  // Stop and remove a module from the enclave
  rpc UnloadModule(UnloadModuleArgs) returns (google.protobuf.Empty) {};

  // Executes an executable module on the user's behalf
  rpc ExecuteModule(ExecuteModuleArgs) returns (ExecuteModuleResponse) {};

  // Gets information about a loaded module
  rpc GetModuleInfo(GetModuleInfoArgs) returns (GetModuleInfoResponse) {};

  // Tells the API container that the client has files artifacts from the web that it would like the API container to know about
  // The API container will download these artifacts locally, so they're available when launching services
  rpc RegisterFilesArtifacts(RegisterFilesArtifactsArgs) returns (google.protobuf.Empty) {};

  // Registers a service with the API container but doesn't start the container for it
  rpc RegisterService(RegisterServiceArgs) returns (RegisterServiceResponse) {};

  // Starts a previously-registered service by creating a Docker container for it
  rpc StartService(StartServiceArgs) returns (StartServiceResponse) {};

  // Returns relevant information about the service
  rpc GetServiceInfo(GetServiceInfoArgs) returns (GetServiceInfoResponse) {};

  // Instructs the API container to remove the given service
  rpc RemoveService(RemoveServiceArgs) returns (google.protobuf.Empty) {};

  // Instructs the API container to repartition the enclave
  rpc Repartition(RepartitionArgs) returns (google.protobuf.Empty) {};

  // Executes the given command inside a running container
  rpc ExecCommand(ExecCommandArgs) returns (ExecCommandResponse) {};

  // Block until the given HTTP endpoint returns available, calling it through a HTTP Get request
  rpc WaitForHttpGetEndpointAvailability(WaitForHttpGetEndpointAvailabilityArgs) returns (google.protobuf.Empty) {};

  // Block until the given HTTP endpoint returns available, calling it through a HTTP Post request
  rpc WaitForHttpPostEndpointAvailability(WaitForHttpPostEndpointAvailabilityArgs) returns (google.protobuf.Empty) {};

  // Executes multiple commands at once
  rpc ExecuteBulkCommands(ExecuteBulkCommandsArgs) returns (google.protobuf.Empty) {};

  // Returns the IDs of the current services in the enclave
  rpc GetServices(google.protobuf.Empty) returns (GetServicesResponse) {};

  // Returns the IDs of the Kurtosis modules that have been loaded into the enclave
  rpc GetModules(google.protobuf.Empty) returns (GetModulesResponse) {};
}

// ==============================================================================================
//                           Shared Objects (Used By Multiple Endpoints)
// ==============================================================================================
message Port {
  enum Protocol {
    TCP = 0;
    SCTP = 1;
    UDP = 2;
  }

  uint32 number = 1;

  // The protocol that the port is listening on
  Protocol protocol = 2;
}

// ==============================================================================================
//                           Start External Container Registration 
// ==============================================================================================
message StartExternalContainerRegistrationResponse {
  // A key that should be passed to the call to finish external container registration
  string registration_key = 1;

  // The IP address that the API container has set aside for the container-to-be-registered
  string ip_addr = 2;
}


// ==============================================================================================
//                           Finish External Container Registration 
// ==============================================================================================
message FinishExternalContainerRegistrationArgs {
  // The key that was returned from the call to start external container registration
  string registration_key = 1;

  // The container ID of the container that is now inside the enclave
  string container_id = 2;
}

// ==============================================================================================
//                                     Load Module
// ==============================================================================================
message LoadModuleArgs {
  string module_id = 1;

  string container_image = 2;

  // The serialized params object that will be passed, as-is, to the module for starting
  // The serialization format is dependent on the module
  string serialized_params = 3;
}

message LoadModuleResponse {
  // The IP address of the module inside the enclave
  string private_ip_addr = 1;

  // The port on which the module is reachable inside the enclave
  Port private_port = 2;

  // Public IP address *outside* the enclave where the module is reachable
  string public_ip_addr = 3;

  // The port the module can be reached at *outside* the enclave
  Port public_port = 4;
}

// ==============================================================================================
//                                     Unload Module
// ==============================================================================================
message UnloadModuleArgs {
  string module_id = 1;
}

// ==============================================================================================
//                                     Execute Module
// ==============================================================================================
message ExecuteModuleArgs {
  string module_id = 1;

  // Serialized parameters data for the module's execute function
  // The serialization format is dependent on the Module
  string serialized_params = 2;
}

message ExecuteModuleResponse {
  // Serialized result data from the module's execute function
  // The serialization format is dependent on the Module
  string serialized_result = 1;
}

// ==============================================================================================
//                                     Get Module Info
// ==============================================================================================
message GetModuleInfoArgs {
  string module_id = 1;
}

message GetModuleInfoResponse {
  // The IP address of the module inside the enclave
  string private_ip_addr = 1;

  // The port on which the module is reachable inside the enclave
  Port private_port = 2;

  // Public IP address *outside* the enclave where the module is reachable
  string public_ip_addr = 3;

  // The port the module can be reached at *outside* the enclave
  Port public_port = 4;
}

// ==============================================================================================
//                                       Register Files Artifacts
// ==============================================================================================
message RegisterFilesArtifactsArgs {
  // A mapping of user_defined_id -> url_of_file_artifact
  map<string, string> files_artifact_urls = 1;
}

// ==============================================================================================
//                                     Register Service
// ==============================================================================================
message RegisterServiceArgs {
  // ID that will be used to identify the service going forward
  string service_id = 1;

  // If emptystring, the default partition ID will be used
  string partition_id = 2;
}

message RegisterServiceResponse {
  // The IP address *inside* the enclave that the service will receive when it starts
  string private_ip_addr = 1;

  // The dirpath where the service's directory exists inside the enclave data directory, relative to the enclave data dir root
  string relative_service_dirpath = 2;
}

// ==============================================================================================
//                                        Start Service
// ==============================================================================================
message StartServiceArgs {
  // ID of the previously-registered service that should be started
  string service_id = 1;

  string docker_image = 2;

  // Definition of the ports *inside* the enclave that the container should have exposed, specified as user_friendly_port_id -> port_definition
  map<string, Port> private_ports = 3;

  // Corresponds to a Dockerfile's ENTRYPOINT directive; leave blank to do no overriding
  repeated string entrypoint_args = 4;

  // Corresponds to a Dockerfile's CMD directive; leave blank to do no overriding
  repeated string cmd_args = 5;

  // Docker environment variables that should be set in the service's container
  map<string, string> docker_env_vars = 6;

  // The full path where the API container should mount the enclave data directory on the service container
  string enclave_data_dir_mnt_dirpath = 7;

  // Mapping of files_artifact_id -> filepath_on_container_to_mount_artifact_contents
  map<string, string> files_artifact_mount_dirpaths = 8;
}

message StartServiceResponse {
  // Public IP address *outside* the enclave where the service is reachable
  // NOTE: Will be empty if the service didn't define any private ports
  string public_ip_addr = 1;

  // Mapping defining the ports that the service can be reached at *outside* the enclave, in the user_defined_port_id -> port_info where user_defined_port_id
  //  corresponds to the ID that was passed in in StartServiceArgs
  // NOTE: Will be empty if the service didn't define any private ports
  map<string, Port> public_ports = 2;
}

// ==============================================================================================
//                                       Get Service Info
// ==============================================================================================
message GetServiceInfoArgs {
  //The service ID to get the info from
  string service_id = 1;
}

message GetServiceInfoResponse {
  // The IP address of the service inside the enclave
  string private_ip_addr = 1;

  // The ports on which the service is reachable inside the enclave, specified in user_specified_port_id -> port_info
  // Will be exactly what was passed in at the time of starting the service
  map<string, Port> private_ports = 2;

  // Public IP address *outside* the enclave where the service is reachable
  // NOTE: Will be empty if the service isn't running or didn't define any private ports
  string public_ip_addr = 3;

  // The ports on which the service can be reached *outside* the enclave, specified in user_specified_port_id -> port_info where user_defined_port_id
  // The user_specified_port_id will match the keys specified in StartServiceArgs
  // NOTE: Will be empty if the service isn't running or didn't define any private ports
  map<string, Port> public_ports = 4;

  // The full path where the enclave data dir is mounted on the service
  string enclave_data_dir_mount_dirpath = 5;

  // The dirpath where the service's directory exists inside the enclave data directory, relative to the enclave data directory root
  string relative_service_dirpath = 6;
}

// ==============================================================================================
//                                        Remove Service
// ==============================================================================================
message RemoveServiceArgs {
  string service_id = 1;

  // How long to wait for the service to gracefully stop before hard killing it
  uint64 container_stop_timeout_seconds = 2;
}

// ==============================================================================================
//                                          Repartition
// ==============================================================================================
message RepartitionArgs {
  // Definition of partitionId -> services that should be inside the partition after repartitioning
  map<string, PartitionServices> partition_services = 1;

  // Definition of partitionIdA -> partitionIdB -> information defining the connection between A <-> B
  map<string, PartitionConnections> partition_connections = 2;

  // Information about the default inter-partition connection to set up if one is not defined in the
  //  partition connections map
  PartitionConnectionInfo default_connection = 3;
}

message PartitionServices {
  // "Set" of service IDs in partition
  map<string, bool> service_id_set = 1;
}

message PartitionConnections {
  map<string, PartitionConnectionInfo> connection_info = 1;
}

message PartitionConnectionInfo {
  // Percentage value of packet loss in a partition connection
  float packet_loss_percentage = 1;
}

// ==============================================================================================
//                                          Exec Command
// ==============================================================================================
message ExecCommandArgs {
  // The service ID of the container that the command should be executed in
  string service_id = 1;

  repeated string command_args = 2;
}

message ExecCommandResponse {
  int32 exit_code = 1;

  // Assumes UTF-8 encoding
  string log_output = 2;
}

// ==============================================================================================
//                             Wait For HTTP Get Endpoint Availability
// ==============================================================================================
message WaitForHttpGetEndpointAvailabilityArgs {
  //The ID of the service to check.
  string service_id = 1;
  //The port of the service to check. For instance 8080
  uint32 port = 2;
  //The path of the service to check. It mustn't start with the first slash. For instance `service/health`
  string path = 3;
  //The number of milliseconds to wait until executing the first HTTP call
  uint32 initial_delay_milliseconds = 4;
  //Max number of HTTP call attempts that this will execute until giving up and returning an error
  uint32 retries = 5;
  //Number of milliseconds to wait between retries
  uint32 retries_delay_milliseconds = 6;
  //If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
  string body_text = 7;
}

// ==============================================================================================
//                           Wait For HTTP Post Endpoint Availability
// ==============================================================================================
message WaitForHttpPostEndpointAvailabilityArgs {
  //The ID of the service to check.
  string service_id = 1;
  //The port of the service to check. For instance 8080
  uint32 port = 2;
  //The path of the service to check. It mustn't start with the first slash. For instance `service/health`
  string path = 3;
  //The content of the request body.
  string request_body = 4;
  //The number of milliseconds to wait until executing the first HTTP call
  uint32 initial_delay_milliseconds = 5;
  //Max number of HTTP call attempts that this will execute until giving up and returning an error
  uint32 retries = 6;
  //Number of milliseconds to wait between retries
  uint32 retries_delay_milliseconds = 7;
  //If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
  string body_text = 8;
}

// ==============================================================================================
//                                      Execute Bulk Commands
// ==============================================================================================
message ExecuteBulkCommandsArgs {
  // Commands, serialized as JSON
  string serialized_commands = 1;
}

// ==============================================================================================
//                                          Get Services
// ==============================================================================================
message GetServicesResponse {
  // "Set" of current service IDs in the enclave
  map<string, bool> service_ids = 1;
}

// ==============================================================================================
//                                          Get Modules
// ==============================================================================================
message GetModulesResponse {
  // "Set" of current Kurtosis module IDs loaded in the enclave
  map<string, bool> module_ids = 1;
}
